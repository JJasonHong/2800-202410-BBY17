<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Capsule</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* Styles for the input div and preview images */
    .input-div {
      min-height: 200px;
      border: 2px dotted black;
      background-color: white;
      position: relative;
      width: 20%;
    }

    .input-div p {
      margin: 0;
    }

    .file {
      width: 100%;
      height: 100%;
      position: absolute;
      opacity: 0;
      cursor: pointer;
    }

    .media {
      position: relative;
      margin-right: 15px;
      margin-bottom: 15px;
    }

    .media img,
    .media video {
      height: 150px;
      width: 100%;
      border-radius: 5px;
      box-shadow: 0 0 5px rgba(0, 0, 0, 0.15);
      overflow: hidden;
    }

    .media textarea {
      width: 100%;
      margin-top: 5px;
      border-radius: 5px;
      box-shadow: 0 0 5px rgba(0, 0, 0, 0.15);
    }

    .media span {
      position: absolute;
      top: 5px;
      right: 5px;
      cursor: pointer;
      font-size: 26px;
      color: white;
      background-color: rgba(0, 0, 0, 0.7);
      border-radius: 50%;
      width: 30px;
      height: 30px;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .media span:hover {
      opacity: 0.8;
    }

    .preview-box {
      border: 2px solid rgba(0, 0, 0, 0.13);
      padding: 10px;
      background-color: white;
    }

    #more-sections-btn {
      width: 100%;
      font-weight: bolder;
      display: none;
    }

    #section-input-initial {
      display: none;
    }
  </style>
</head>

<body>
  <%- include("templates/header") %>
  <div class="container mt-5">
    <div class="row">
      <div class="col">
        <h2 class="mb-4">Create Capsule</h2>
        <!-- Server message area to show upload success or failure -->
        <div class="server-message mb-3"></div>

        <!-- Title, Date, and Capsule Caption Inputs -->
        <div class="form-group">
          <label for="title">Title</label>
          <input type="text" id="title" name="title" class="form-control" required>
        </div>
        <div class="form-group">
          <label for="date">Date</label>
          <input type="date" id="date" name="date" class="form-control" required>
        </div>
        <div class="form-group">
          <label for="capsule-caption">Capsule Caption</label>
          <textarea id="capsule-caption" name="capsule-caption" class="form-control" rows="3"></textarea>
        </div>

        <!-- Drag & Drop / Browse File Input -->
        <div>
          <div class="input-group mt-4" id="section-input-initial">
            <input type="text" class="form-control section-text" placeholder="Section title">
            <div class="input-group-append">
              <button class="btn btn-outline-secondary" type="button" onclick="removeSection(1)">X</button>
            </div>
          </div>
          <div class="mt-4" id="add-sections-btn">
            <button class="btn btn-outline-secondary" type="button" onclick="addSections()">Add Sections</button>
          </div>
          <div class="preview-box d-flex flex-wrap">
            <div class="input-div d-flex flex-wrap justify-content-center align-items-center text-center" id="media-input-div-1">
              <p>Drag & drop photos or videos here or <span class="text-primary font-weight-bold">Browse</span></p>
              <input type="file" class="file" id="media-input-1" multiple="multiple" accept="image/jpeg, image/png, image/jpg, video/mp4, video/ogg, video/webm, video/mkv" required 
                onchange="browseFileInput(this)" ondragover="dragFileInput(this)" ondrop="dropFileInput(this)"
              />
            </div>
          </div>
          <div id="sections-holder">
          </div>
          <button class="btn btn-outline-secondary" type="button" onclick="addSection()" id="more-sections-btn">+</button>
        </div>

        <!-- Upload Form -->
        <form id="uploadForm" class="mt-4" enctype="multipart/form-data" action="/upload" method="POST">
          <!-- 
          <div class="d-flex justify-content-between align-items-center mb-2">
            <h3>Preview</h3>
          </div>
          <div class="preview-box">
            <div class="queued-div d-flex flex-wrap"></div>
          </div>
          -->
          <button type="submit" class="btn btn-primary mt-3">Upload</button>
        </form>
      </div>
    </div>
  </div>

  <script>
    // Store selected images and DOM elements
    let queuedImagesArray = [],
      imageOrdering = [],
      queuedDiv = document.querySelector('.queued-div'),
      inputDiv = document.querySelector('.input-div'),
      input = document.querySelector('.input-div input'),
      serverMessage = document.querySelector('.server-message');

    function clearInputs() {
      let media = document.querySelectorAll(".media");
      media.forEach((elem) => {
        elem.remove(); 
      });
    }

    // Function to display the selected images in the preview area
    function displayQueuedImages() {
      clearInputs()
      let mediaInput = 
      queuedImagesArray.forEach((elem, index) => {
        if (elem.type.startsWith("image/")) {
          media = `<div class="media">
                      <img src="${URL.createObjectURL(elem)}" alt="image">
                      <textarea placeholder="Enter caption for this image" name="caption_${index}"></textarea>
                      <span onclick="deleteQueuedImage(${index})">&times;</span>
                    </div>`;
          document.getElementById("media-input-div-" + imageOrdering[index]).insertAdjacentHTML("beforebegin", media);
        } else if (file.type.startsWith("video/")) {
          media += `<div class="media">
                      <video controls>
                        <source src="${URL.createObjectURL(file)}" type="${file.type}">
                        Your browser does not support the video tag.
                      </video>
                      <textarea placeholder="Enter caption for this video" name="caption_${index}"></textarea>
                      <span onclick="deleteQueuedImage(${index})">&times;</span>
                    </div>`;
        }
      });
      
     // queuedDiv.innerHTML = media;
    }

    // Function to remove an image from the queue
    function deleteQueuedImage(index) {
      queuedImagesArray.splice(index, 1);
      displayQueuedImages();
    }

    // Event listener for file input change (when files are selected via browse)
    function browseFileInput(e) {
      let sectionID = parseInt(e.id.split("media-input-")[1]);
      let input = document.querySelector("#"+e.id);
      const files = input.files;
      for (let i = 0; i < files.length; i++) {
        queuedImagesArray.push(files[i]);
        imageOrdering.push(sectionID);
      }
      displayQueuedImages();
    }

    // Event listeners for drag & drop functionality
    function dragFileInput(e) {
      e.preventDefault();
    }

    function dropFileInput(e) {
      e.preventDefault(); // Prevent open the file in the browser
      let sectionID = parseInt(e.id.split("media-input-")[1]);
      const files = e.dataTransfer.files; // Get the files that were dropped into the inputDiv
      for (let i = 0; i < files.length; i++) { // Loop through each dropped file
        if (!files[i].type.match("image.*") && !files[i].type.match("video.*")) continue; // If the file is not an image or video, skip it and continue to the next file
        // Check if the file name is not already in the queuedImagesArray
        if (queuedImagesArray.every(elem=> elem.file.name !== files[i].name)) {
          queuedImagesArray.push(files[i]); // If the file is unique, add it to the queuedImagesArray
          imageOrdering.push(sectionID);
        }
      }
      displayQueuedImages();
    }

    // Event listener for form submission
    document.getElementById("uploadForm").addEventListener("submit", (e) => {
  e.preventDefault();
  const title = document.getElementById('title').value;
  const date = document.getElementById('date').value;
  const capsuleCaption = document.getElementById('capsule-caption').value;
  const files = queuedImagesArray;
  const sections = getSectionTexts();
  if (!title || !date || files.length === 0) {
    serverMessage.textContent = "All fields are required!";
    serverMessage.classList.add('alert', 'alert-danger');
    return;
  }
  const formData = new FormData();
  formData.append('title', title);
  formData.append('date', date);
  formData.append('capsule-caption', capsuleCaption);
  files.forEach((file, index) => {
    formData.append('images', file);
    const caption = document.querySelector(`textarea[name="caption_${index}"]`).value;
    formData.append(`captions[]`, caption);
    const ordering = imageOrdering[index];
    formData.append('ordering[]', ordering);
  });
  sections.forEach((section) => {
    formData.append('sections[]', section);
  });

  // Fetch API to send the form data
  fetch('/upload', {
    method: 'POST',
    body: formData
  })
    .then(response => response.json())
    .then(data => {
      console.log(data);
      serverMessage.textContent = data.message;
      serverMessage.classList.remove('alert-danger');
      serverMessage.classList.add('alert', 'alert-success');
      queuedImagesArray = [];
      displayQueuedImages();
      document.getElementById('title').value = '';
      document.getElementById('date').value = '';
      document.getElementById('capsule-caption').value = '';
    })
    .catch(error => {
      console.error('Error:', error);
      // Display error message
      serverMessage.textContent = 'Error uploading files';
      serverMessage.classList.remove('alert-success');
      serverMessage.classList.add('alert', 'alert-danger');
    });
});

    //===== Sections-related =====

    let sectionCount = 0;
    const sectionsHolder = document.getElementById("sections-holder");

    function addSections() {
      document.getElementById("more-sections-btn").style.display = "block";
      document.getElementById("add-sections-btn").style.display = "none";
      document.getElementById("section-input-initial").style.display = "flex";
      sectionCount = 1;
    }

    function addSection() {
      sectionCount += 1;
      let html = `<div class="mt-4" id=${"section-" + sectionCount}>
                    <div class="input-group">
                      <input type="text" class="form-control section-text" placeholder="Section title" required>
                      <div class="input-group-append">
                        <button class="btn btn-outline-secondary" type="button" onclick="removeSection(${sectionCount})">X</button>
                      </div>
                    </div>
                    <div class="preview-box d-flex flex-wrap">
                      <div class="input-div d-flex justify-content-center align-items-center text-center" id=${"media-input-div-" + sectionCount}>
                        <p>Drag & drop photos or videos here or <span class="text-primary font-weight-bold">Browse</span></p>
                        <input type="file" class="file" id=${"media-input-" + sectionCount} multiple="multiple" accept="image/jpeg, image/png, image/jpg, video/mp4, video/ogg, video/webm, video/mkv" required               
                          onchange="browseFileInput(this)" ondragover="dragFileInput(this)" ondrop="dropFileInput(this)"
                        />
                      </div>
                    </div>
                  </div>`;
      sectionsHolder.insertAdjacentHTML("beforeend", html);
    }

    function removeSection(id) {
      sectionCount -= 1;
      if (sectionCount == 0) {
        document.getElementById("more-sections-btn").style.display = "none";
        document.getElementById("add-sections-btn").style.display = "block";
        document.getElementById("section-input-initial").style.display = "none";
        document.getElementById("media-input-div-1").setAttribute('style', 'display:flex !important');
        if (id != 1) {
          let toRemove = document.getElementById("section-" + id);
          sectionsHolder.removeChild(toRemove);
        }
      } else if (id == 1) {
        document.getElementById("more-sections-btn").style.display = "none";
        document.getElementById("section-input-initial").style.display = "none";
        document.getElementById("media-input-div-1").setAttribute('style', 'display:none !important');
      } else {
        let toRemove = document.getElementById("section-" + id);
        sectionsHolder.removeChild(toRemove);
        
      }
    }

    function getSectionTexts() {
      let sectionTexts = document.querySelectorAll(".section-text");
      let res = []
      sectionTexts.forEach((sectionText) => {
        res.push(sectionText.value)
      });
      return res;
    }

  </script>
      <%- include("templates/footer") %>
</body>

</html>
